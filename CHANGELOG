* Enhanced AssociationCollection test coverage

* ActiveRecord::Base#expire_cache_for now uses the new cache access API

* Abstracted ActiveRecord::Base#cache_fetch in order to normalize cache access for <reflection_name>_ids

* Reduced the amount of cache hits, caching the status of cached relations with ActiveRecord::Base#cached_associations



*0.0.1 (September 10th, 2008)*

* Updated README with project informations

* Make sure 'test' is the default Rake task

* Added project description to README. Added about.yml.

* Updated README with informations about required environment settings

* Only load the plugin if the current environment has the cache turned on

* Added support for cache expiration on after_save callback

* Make sure to use ActiveRecord cache proxy for test suite

* Make sure test suite will run using RAILS_ENV in test mode

* Added support for scoped finders in AssociationCollection. Fixed cache renewal for AssociationCollection#delete.

* Added support for cache renewal on AssociationCollection methods

* Added support for cache expiration on direct associated objects updates

* Updated README example

* Removed CacheObserver. Fixed cache expiration for has_many relation.

* Introducing CacheObserver in order to transparently handle cache expiring for has_many macro

* Test enhancements for AssociationCollection#<< on polymorphic associations

* Test enhancements for AssociationCollection#<<. Make sure to expire caches when an associated object changes owner.

  class Author < ActiveRecord::Base
    has_many :posts, :cached => true
  end

  post = author.posts.last
  another_author.posts << post # => refresh both author and another_author caches

* AssociationCollection#<< support

  class Author < ActiveRecord::Base
    has_many :posts, :cached => true
  end

  author.posts << post # => causes a refresh of cached posts

* has_many association support
  
  class Author < ActiveRecord::Base
    has_many :posts, :cached => true
  end
